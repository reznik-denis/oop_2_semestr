// Reznik_LAB09_V13.cpp : This file contains the 'main' function. Program execution begins and ends there.
//1. Створити у програмі клас функція. Як закриті змінні використайте динамічні масиви, які визначають значення 
// математичної функції по осі абсцис і ординат відповідно. Додайте у клас конструктор і деструктор, а також функції 
// вставки і вилучення, які повинні зчитувати дані з файлу і відображати дані на екрані відповідним чином. 
//2. Створити на диску файл, який містить три стовпчики цифр.Перший — значення по осі абсцис, два інші — по осі ординат 
// для двох різних математичних функцій.Числа у стовпцях розділені пробілами.
//3. Створити у програмі функцію вилучення.Вона повинна зчитувати дані з файлу, при цьому враховуючи, що числа 
// відокремлені один від одного пробілами, а також те, що перший стовпчик цифр — це значення по осі абсцис(тобто їх 
// слід зберегти у масиві для абсцис), другий(або третій) стовпчики — значення по осі ординат(їх слід зберігати в 
// іншому масиві, призначеному для значень ординат).Оскільки у файлі зберігається інформація для двох функцій, то слід в 
// основній частині програми створити два об’єкти класу функція : один для збереження даних про одну, інший — про другу функцію з файлу.
//4. Додати до програми дружню функцію визначення максимального і мінімального значення з файлу та виведення цих значень на екран.
//5. Додайте у програму функцію вставки.Вона повинна відобразити на екрані графік відповідної функції на осях координат.
//6. Додайте у програму функцію, що зчитує дані з файлу і записує їх до іншого таким чином : замінює пробіли на табуляцію, 
// кожне число записує в нотації з фіксованою краточкоюпкою, з трьома знаками після коми, кожне число займає 10 
// позицій(ширина поля), цілі числа мають бути виведені у вигляді “ + 10.000”.
//7. Продемонструвати роботу усіх функцій створених класів в основній частині програми, для цього оголосивши попередньо необхідні об’єкти


#include <iostream>      // для вводу/виводу в консоль
#include <fstream>       // для роботи з файлами (читання/запис)
#include <iomanip>       // для форматованого виводу (setprecision, setw тощо)
#include <vector>        // для використання динамічного масиву (std::vector)
#include <string>        // для роботи з рядками
#include <algorithm>     // для алгоритмів STL, наприклад, minmax_element

using namespace std;     // дозволяє не писати std:: перед кожним елементом STL

class Function {
private:
    vector<double> x; // масив значень X (абсциси)
    vector<double> y; // масив значень Y (ординати)

public:
    // Конструктор (порожній)
    Function() {}

    // Зчитування з файлу
    void readFromFile(const string& filename, int yColumn = 2) {
        ifstream file(filename);                   // відкриваємо файл для читання
        double xVal, y1Val, y2Val;                 // змінні для зчитування 3 чисел з кожного рядка

        while (file >> xVal >> y1Val >> y2Val) {   // зчитуємо, поки є дані
            x.push_back(xVal);                     // додаємо значення x
            if (yColumn == 2) y.push_back(y1Val);  // якщо треба 2 колонку – додаємо y1
            else if (yColumn == 3) y.push_back(y2Val); // інакше – 3 колонку
        }
    }

    // Виведення на екран
    void display() const {
        cout << "X\tY\n";
        for (size_t i = 0; i < x.size(); ++i) {
            cout << fixed << setprecision(3)            // фіксована кількість знаків після коми
                << setw(10) << showpos << x[i]          // вирівнювання + знак перед числом
                << "\t" << setw(10) << showpos << y[i] << endl;
        }
    }

    // Дружні функції
    friend void findMinMax(const Function& f); // має доступ до приватних полів

    // Запис у новий файл з табуляцією та форматуванням
    void writeFormatted(const string& outFilename) const {
        ofstream out(outFilename);               // відкриваємо файл для запису
        for (size_t i = 0; i < x.size(); ++i) {
            out << fixed << setprecision(3)
                << setw(10) << showpos << x[i] << "\t"
                << setw(10) << showpos << y[i] << "\n";
        }
    }

    // Просте ASCII-графічне відображення (для консольної демонстрації)
    void plot() const {
        cout << "\nPlot:\n";
        for (size_t i = 0; i < y.size(); ++i) {
            int bars = static_cast<int>(y[i]);                  // кількість зірочок пропорційна y
            cout << setw(6) << fixed << setprecision(1) << x[i] << " | ";
            for (int j = 0; j < bars; ++j) cout << "*";         // малюємо лінію з '*'
            cout << "\n";
        }
    }
};

void findMinMax(const Function& f) {
    auto result = minmax_element(f.y.begin(), f.y.end()); // знаходимо min та max одночасно
    auto minIt = result.first;
    auto maxIt = result.second;
    cout << "\nMinimum: " << *minIt << ", Maximum: " << *maxIt << endl;
}

int main() {
    Function f1, f2; // створюємо два об'єкти для двох функцій

    // Читаємо з файлу data.txt
    f1.readFromFile("data.txt", 2); // друга колонка
    f2.readFromFile("data.txt", 3); // третя колонка

    // Вивід значень
    cout << "Function 1:\n";
    f1.display();

    cout << "\nFunction 2:\n";
    f2.display();

    // Знаходимо min/max
    findMinMax(f1);
    findMinMax(f2);

    // Виводимо графік
    f1.plot();
    f2.plot();

    // Запис у новий файл
    f1.writeFormatted("output1.txt");
    f2.writeFormatted("output2.txt");

    return 0;
}

// Run program: Ctrl + F5 or Debug > Start Without Debugging menu
// Debug program: F5 or Debug > Start Debugging menu